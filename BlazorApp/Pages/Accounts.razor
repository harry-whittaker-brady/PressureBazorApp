@page "/accounts"

@using Domain.Models
@using Domain.Enums
@using System.Net.Http
@using Services
@inject HttpClient Http
@inject AccountService service
@inject BankService bankService

<h1>Accounts</h1>


<EditForm Model="@formEntity" OnValidSubmit="AddEntity">
    <ValidationSummary />

    <InputText id="Account Name" @bind-Value="formEntity.Name" />
    <select @bind="bankId">
        @foreach (var bank in banks)
        {
            <option value=@bank.Id>@bank.Name</option>
        }
    </select>
    <select @bind="formEntity.AccountType">
        @foreach (var accountType in Enum.GetValues(typeof(TransactionType)).Cast<TransactionType>())
        {
            <option value=@accountType>@accountType</option>
        }
    </select>
    <button type="submit">Submit</button>
</EditForm>

<GenericGridLoader Entities="accounts"> 
    <PopulatedFragment>
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Account Name</th>
                    <th>Bank Name</th>
                    <th>Account Type</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in accounts)
                {
                    <tr>
                        <td>@entity.Id</td>
                        <td>@entity.Name</td>
                        <td>@entity.Bank.Name</td>
                        <td>@entity.AccountType</td>
                        <td>@entity.Balance</td>
                        <button class="btn btn-primary" @onclick="@(e => DeleteEntity(entity.Id))">Remove</button>
                    </tr>
                }
            </tbody>
        </table>
    </PopulatedFragment>
</GenericGridLoader>

@code {

    List<Account> accounts;
    List<Bank> banks;

    protected override async Task OnInitializedAsync()
    {
        UpdateAccounts();
        UpdateBanks();
    }

    long bankId = 0;
    Account formEntity = new Account();

    private async Task AddEntity()
    {
        formEntity.Bank = banks.Where(x => x.Id == bankId).FirstOrDefault();
        await service.AddEntityAsync(formEntity);
        UpdateAccounts();
    }

    private async Task DeleteEntity(long id)
    {
        await service.DeleteEntityAsync(id);
        UpdateAccounts();
    }

    async void UpdateBanks()
    {
        var res = await bankService.GetEntitiesAsync();
        banks = res.Entities;
    }

    async void UpdateAccounts()
    {
        var res = await service.GetEntitiesAsync();
        accounts = res.Entities;
    }
}
